// <auto-generated />
using System;
using FoodCart_Hexaware.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodCart_Hexaware.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240912033036_FinalCheckup")]
    partial class FinalCheckup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodCart_Hexaware.Models.CardPayment", b =>
                {
                    b.Property<int>("CardPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardPaymentId"));

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.HasKey("CardPaymentId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("CardPayment");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.Cart", b =>
                {
                    b.Property<int>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CartID");

                    b.HasIndex("ItemID");

                    b.HasIndex("UserID");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.DeliveryAgent", b =>
                {
                    b.Property<int>("DeliveryAgentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryAgentID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DeliveryAgentID");

                    b.ToTable("DeliveryAgents");

                    b.HasData(
                        new
                        {
                            DeliveryAgentID = 1,
                            Address = "123 Elm Street, Springfield",
                            Email = "john.doe@example.com",
                            IsAvailable = true,
                            Name = "John Doe",
                            PhoneNumber = "123-456-7890"
                        },
                        new
                        {
                            DeliveryAgentID = 2,
                            Address = "456 Oak Avenue, Springfield",
                            Email = "jane.smith@example.com",
                            IsAvailable = true,
                            Name = "Jane Smith",
                            PhoneNumber = "234-567-8901"
                        },
                        new
                        {
                            DeliveryAgentID = 3,
                            Address = "789 Pine Road, Springfield",
                            Email = "emily.johnson@example.com",
                            IsAvailable = true,
                            Name = "Emily Johnson",
                            PhoneNumber = "345-678-9012"
                        },
                        new
                        {
                            DeliveryAgentID = 4,
                            Address = "101 Maple Drive, Springfield",
                            Email = "michael.brown@example.com",
                            IsAvailable = true,
                            Name = "Michael Brown",
                            PhoneNumber = "456-789-0123"
                        },
                        new
                        {
                            DeliveryAgentID = 5,
                            Address = "202 Birch Lane, Springfield",
                            Email = "sarah.davis@example.com",
                            IsAvailable = true,
                            Name = "Sarah Davis",
                            PhoneNumber = "567-890-1234"
                        },
                        new
                        {
                            DeliveryAgentID = 6,
                            Address = "303 Cedar Street, Springfield",
                            Email = "david.wilson@example.com",
                            IsAvailable = true,
                            Name = "David Wilson",
                            PhoneNumber = "678-901-2345"
                        },
                        new
                        {
                            DeliveryAgentID = 7,
                            Address = "404 Spruce Avenue, Springfield",
                            Email = "laura.miller@example.com",
                            IsAvailable = true,
                            Name = "Laura Miller",
                            PhoneNumber = "789-012-3456"
                        },
                        new
                        {
                            DeliveryAgentID = 8,
                            Address = "505 Fir Street, Springfield",
                            Email = "daniel.taylor@example.com",
                            IsAvailable = true,
                            Name = "Daniel Taylor",
                            PhoneNumber = "890-123-4567"
                        },
                        new
                        {
                            DeliveryAgentID = 9,
                            Address = "606 Redwood Road, Springfield",
                            Email = "olivia.anderson@example.com",
                            IsAvailable = true,
                            Name = "Olivia Anderson",
                            PhoneNumber = "901-234-5678"
                        },
                        new
                        {
                            DeliveryAgentID = 10,
                            Address = "707 Sequoia Boulevard, Springfield",
                            Email = "james.martinez@example.com",
                            IsAvailable = true,
                            Name = "James Martinez",
                            PhoneNumber = "012-345-6789"
                        });
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.MenuCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryID");

                    b.ToTable("MenuCategories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryDescription = "Start your day with a hearty breakfast.",
                            CategoryName = "Breakfast"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryDescription = "Enjoy a satisfying lunch.",
                            CategoryName = "Lunch"
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryDescription = "End your day with a delicious dinner.",
                            CategoryName = "Dinner"
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryDescription = "Juicy burgers with various toppings.",
                            CategoryName = "Burgers"
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryDescription = "Pizza with a variety of toppings.",
                            CategoryName = "Pizza"
                        },
                        new
                        {
                            CategoryID = 6,
                            CategoryDescription = "Traditional Italian dishes.",
                            CategoryName = "Italian"
                        },
                        new
                        {
                            CategoryID = 7,
                            CategoryDescription = "Authentic Arabian cuisine.",
                            CategoryName = "Arabian"
                        },
                        new
                        {
                            CategoryID = 8,
                            CategoryDescription = "Small dishes to start your meal.",
                            CategoryName = "Appetizers"
                        },
                        new
                        {
                            CategoryID = 9,
                            CategoryDescription = "Hearty and fulfilling main courses.",
                            CategoryName = "Main Dishes"
                        },
                        new
                        {
                            CategoryID = 10,
                            CategoryDescription = "Drinks to complement your meal.",
                            CategoryName = "Beverages"
                        },
                        new
                        {
                            CategoryID = 11,
                            CategoryDescription = "Sweet treats to end your meal.",
                            CategoryName = "Desserts"
                        });
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.MenuItems", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemID"));

                    b.Property<string>("AvailabilityStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CuisineType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DietaryInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TasteInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            ItemID = 1,
                            AvailabilityStatus = "Available",
                            CategoryID = 1,
                            CuisineType = "American",
                            DietaryInfo = "Vegetarian",
                            ImageURL = "images/pancakes.jpg",
                            Ingredients = "Flour, Eggs, Milk, Butter, Syrup",
                            ItemDescription = "Fluffy pancakes served with syrup and butter.",
                            ItemName = "Pancakes",
                            ItemPrice = 5.99m,
                            TasteInfo = "Sweet"
                        },
                        new
                        {
                            ItemID = 2,
                            AvailabilityStatus = "Available",
                            CategoryID = 1,
                            CuisineType = "American",
                            DietaryInfo = "Vegetarian",
                            ImageURL = "images/omelette.jpg",
                            Ingredients = "Eggs, Cheese, Bell Peppers, Onions",
                            ItemDescription = "Classic omelette with cheese and vegetables.",
                            ItemName = "Omelette",
                            ItemPrice = 6.49m,
                            TasteInfo = "Savory"
                        },
                        new
                        {
                            ItemID = 3,
                            AvailabilityStatus = "Available",
                            CategoryID = 2,
                            CuisineType = "American",
                            DietaryInfo = "Low Carb",
                            ImageURL = "images/chicken_salad.jpg",
                            Ingredients = "Chicken, Lettuce, Tomato, Cucumber, Vinaigrette",
                            ItemDescription = "Fresh salad with grilled chicken and vinaigrette.",
                            ItemName = "Grilled Chicken Salad",
                            ItemPrice = 8.99m,
                            TasteInfo = "Savory"
                        },
                        new
                        {
                            ItemID = 4,
                            AvailabilityStatus = "Available",
                            CategoryID = 2,
                            CuisineType = "American",
                            DietaryInfo = "High Protein",
                            ImageURL = "images/turkey_sandwich.jpg",
                            Ingredients = "Turkey, Lettuce, Tomato, Mayo, Bread",
                            ItemDescription = "Turkey sandwich with lettuce, tomato, and mayo.",
                            ItemName = "Turkey Sandwich",
                            ItemPrice = 7.49m,
                            TasteInfo = "Savory"
                        },
                        new
                        {
                            ItemID = 5,
                            AvailabilityStatus = "Available",
                            CategoryID = 3,
                            CuisineType = "American",
                            DietaryInfo = "High Protein",
                            ImageURL = "images/steak_dinner.jpg",
                            Ingredients = "Steak, Potatoes, Vegetables",
                            ItemDescription = "Grilled steak served with mashed potatoes and vegetables.",
                            ItemName = "Steak Dinner",
                            ItemPrice = 15.99m,
                            TasteInfo = "Savory"
                        },
                        new
                        {
                            ItemID = 6,
                            AvailabilityStatus = "Available",
                            CategoryID = 3,
                            CuisineType = "Italian",
                            DietaryInfo = "Contains Dairy",
                            ImageURL = "images/lasagna.jpg",
                            Ingredients = "Pasta, Beef, Cheese, Tomato Sauce",
                            ItemDescription = "Layered pasta with meat sauce and cheese.",
                            ItemName = "Lasagna",
                            ItemPrice = 14.49m,
                            TasteInfo = "Savory"
                        },
                        new
                        {
                            ItemID = 7,
                            AvailabilityStatus = "Available",
                            CategoryID = 4,
                            CuisineType = "American",
                            DietaryInfo = "Contains Dairy",
                            ImageURL = "images/cheeseburger.jpg",
                            Ingredients = "Beef, Cheese, Lettuce, Tomato, Bun",
                            ItemDescription = "Beef patty with cheese, lettuce, and tomato.",
                            ItemName = "Cheeseburger",
                            ItemPrice = 9.99m,
                            TasteInfo = "Savory"
                        },
                        new
                        {
                            ItemID = 8,
                            AvailabilityStatus = "Available",
                            CategoryID = 4,
                            CuisineType = "American",
                            DietaryInfo = "Vegetarian",
                            ImageURL = "images/veggie_burger.jpg",
                            Ingredients = "Vegetables, Cheese, Bun",
                            ItemDescription = "Vegetarian burger with grilled vegetables and cheese.",
                            ItemName = "Veggie Burger",
                            ItemPrice = 8.49m,
                            TasteInfo = "Savory"
                        },
                        new
                        {
                            ItemID = 9,
                            AvailabilityStatus = "Available",
                            CategoryID = 5,
                            CuisineType = "Italian",
                            DietaryInfo = "Contains Dairy",
                            ImageURL = "images/margherita_pizza.jpg",
                            Ingredients = "Tomato Sauce, Mozzarella, Basil",
                            ItemDescription = "Classic pizza with tomato sauce and mozzarella cheese.",
                            ItemName = "Margherita Pizza",
                            ItemPrice = 11.99m,
                            TasteInfo = "Savory"
                        },
                        new
                        {
                            ItemID = 10,
                            AvailabilityStatus = "Available",
                            CategoryID = 5,
                            CuisineType = "Italian",
                            DietaryInfo = "Contains Dairy",
                            ImageURL = "images/pepperoni_pizza.jpg",
                            Ingredients = "Tomato Sauce, Mozzarella, Pepperoni",
                            ItemDescription = "Pizza with pepperoni and cheese.",
                            ItemName = "Pepperoni Pizza",
                            ItemPrice = 12.99m,
                            TasteInfo = "Savory"
                        },
                        new
                        {
                            ItemID = 11,
                            AvailabilityStatus = "Available",
                            CategoryID = 6,
                            CuisineType = "Italian",
                            DietaryInfo = "Contains Dairy",
                            ImageURL = "images/carbonara.jpg",
                            Ingredients = "Spaghetti, Pancetta, Cream, Parmesan",
                            ItemDescription = "Spaghetti with creamy carbonara sauce and pancetta.",
                            ItemName = "Spaghetti Carbonara",
                            ItemPrice = 13.99m,
                            TasteInfo = "Savory"
                        },
                        new
                        {
                            ItemID = 12,
                            AvailabilityStatus = "Available",
                            CategoryID = 6,
                            CuisineType = "Italian",
                            DietaryInfo = "Contains Dairy",
                            ImageURL = "images/chicken_alfredo.jpg",
                            Ingredients = "Fettuccine, Chicken, Alfredo Sauce",
                            ItemDescription = "Fettuccine pasta with creamy Alfredo sauce and chicken.",
                            ItemName = "Chicken Alfredo",
                            ItemPrice = 14.49m,
                            TasteInfo = "Savory"
                        },
                        new
                        {
                            ItemID = 13,
                            AvailabilityStatus = "Available",
                            CategoryID = 7,
                            CuisineType = "Arabian",
                            DietaryInfo = "Contains Dairy",
                            ImageURL = "images/chicken_shawarma.jpg",
                            Ingredients = "Chicken, Pita, Vegetables, Shawarma Spices",
                            ItemDescription = "Spiced chicken wrapped in pita with vegetables.",
                            ItemName = "Chicken Shawarma",
                            ItemPrice = 10.99m,
                            TasteInfo = "Savory"
                        },
                        new
                        {
                            ItemID = 14,
                            AvailabilityStatus = "Available",
                            CategoryID = 7,
                            CuisineType = "Arabian",
                            DietaryInfo = "Vegan",
                            ImageURL = "images/falafel.jpg",
                            Ingredients = "Chickpeas, Tahini, Spices",
                            ItemDescription = "Deep-fried chickpea balls with tahini sauce.",
                            ItemName = "Falafel",
                            ItemPrice = 8.49m,
                            TasteInfo = "Savory"
                        },
                        new
                        {
                            ItemID = 15,
                            AvailabilityStatus = "Available",
                            CategoryID = 8,
                            CuisineType = "Asian",
                            DietaryInfo = "Vegetarian",
                            ImageURL = "images/spring_rolls.jpg",
                            Ingredients = "Vegetables, Spring Roll Wrappers",
                            ItemDescription = "Crispy spring rolls filled with vegetables.",
                            ItemName = "Spring Rolls",
                            ItemPrice = 6.99m,
                            TasteInfo = "Savory"
                        },
                        new
                        {
                            ItemID = 16,
                            AvailabilityStatus = "Available",
                            CategoryID = 8,
                            CuisineType = "Italian",
                            DietaryInfo = "Vegetarian",
                            ImageURL = "images/garlic_bread.jpg",
                            Ingredients = "Bread, Garlic, Butter, Herbs",
                            ItemDescription = "Toasted bread with garlic and herbs.",
                            ItemName = "Garlic Bread",
                            ItemPrice = 5.49m,
                            TasteInfo = "Savory"
                        },
                        new
                        {
                            ItemID = 17,
                            AvailabilityStatus = "Available",
                            CategoryID = 9,
                            CuisineType = "Russian",
                            DietaryInfo = "Contains Dairy",
                            ImageURL = "images/beef_stroganoff.jpg",
                            Ingredients = "Beef, Mushrooms, Cream, Onions",
                            ItemDescription = "Tender beef in a creamy mushroom sauce.",
                            ItemName = "Beef Stroganoff",
                            ItemPrice = 14.99m,
                            TasteInfo = "Savory"
                        },
                        new
                        {
                            ItemID = 18,
                            AvailabilityStatus = "Available",
                            CategoryID = 9,
                            CuisineType = "Indian",
                            DietaryInfo = "Contains Dairy",
                            ImageURL = "images/chicken_curry.jpg",
                            Ingredients = "Chicken, Rice, Curry Spices",
                            ItemDescription = "Spicy chicken curry served with rice.",
                            ItemName = "Chicken Curry",
                            ItemPrice = 12.49m,
                            TasteInfo = "Spicy"
                        },
                        new
                        {
                            ItemID = 19,
                            AvailabilityStatus = "Available",
                            CategoryID = 10,
                            CuisineType = "American",
                            DietaryInfo = "Vegan",
                            ImageURL = "images/lemonade.jpg",
                            Ingredients = "Lemon, Sugar, Water",
                            ItemDescription = "Freshly squeezed lemonade.",
                            ItemName = "Lemonade",
                            ItemPrice = 3.99m,
                            TasteInfo = "Sweet"
                        },
                        new
                        {
                            ItemID = 20,
                            AvailabilityStatus = "Available",
                            CategoryID = 10,
                            CuisineType = "American",
                            DietaryInfo = "Contains Dairy",
                            ImageURL = "images/iced_coffee.jpg",
                            Ingredients = "Coffee, Cream, Sugar",
                            ItemDescription = "Chilled coffee with a touch of cream.",
                            ItemName = "Iced Coffee",
                            ItemPrice = 4.49m,
                            TasteInfo = "Bitter"
                        },
                        new
                        {
                            ItemID = 21,
                            AvailabilityStatus = "Available",
                            CategoryID = 11,
                            CuisineType = "American",
                            DietaryInfo = "Contains Dairy",
                            ImageURL = "images/chocolate_cake.jpg",
                            Ingredients = "Chocolate, Flour, Sugar, Eggs",
                            ItemDescription = "Rich chocolate cake with a creamy frosting.",
                            ItemName = "Chocolate Cake",
                            ItemPrice = 6.49m,
                            TasteInfo = "Sweet"
                        },
                        new
                        {
                            ItemID = 22,
                            AvailabilityStatus = "Available",
                            CategoryID = 11,
                            CuisineType = "American",
                            DietaryInfo = "Contains Dairy",
                            ImageURL = "images/cheesecake.jpg",
                            Ingredients = "Cream Cheese, Sugar, Graham Crackers",
                            ItemDescription = "Creamy cheesecake with a graham cracker crust.",
                            ItemName = "Cheesecake",
                            ItemPrice = 7.49m,
                            TasteInfo = "Sweet"
                        });
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.NetBankingPayment", b =>
                {
                    b.Property<int>("NetBankingPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NetBankingPaymentId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.HasKey("NetBankingPaymentId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("NetBankingPayment");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RestID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("ItemID");

                    b.HasIndex("RestID");

                    b.HasIndex("UserID");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.OrderItems", b =>
                {
                    b.Property<int>("OrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemID"));

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemID");

                    b.HasIndex("ItemID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.Orders", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int?>("DeliveryAgentID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RestaurantID")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("DeliveryAgentID");

                    b.HasIndex("RestaurantID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("TransDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantID"));

                    b.Property<TimeSpan>("ClosingHours")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("OpeningHours")
                        .HasColumnType("time");

                    b.Property<string>("RestaurantAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RestaurantDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RestaurantPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RestaurantID");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            RestaurantID = 1,
                            ClosingHours = new TimeSpan(0, 11, 0, 0, 0),
                            OpeningHours = new TimeSpan(0, 6, 0, 0, 0),
                            RestaurantAddress = "123 Breakfast Ave",
                            RestaurantDescription = "Serving the best breakfast in town.",
                            RestaurantEmail = "contact@breakfastclub.com",
                            RestaurantName = "The Breakfast Club",
                            RestaurantPhone = "1234567890"
                        },
                        new
                        {
                            RestaurantID = 2,
                            ClosingHours = new TimeSpan(0, 15, 0, 0, 0),
                            OpeningHours = new TimeSpan(0, 11, 0, 0, 0),
                            RestaurantAddress = "456 Lunch Lane",
                            RestaurantDescription = "Delicious lunch options with a cozy ambiance.",
                            RestaurantEmail = "info@lunchhaven.com",
                            RestaurantName = "Lunch Haven",
                            RestaurantPhone = "2345678901"
                        },
                        new
                        {
                            RestaurantID = 3,
                            ClosingHours = new TimeSpan(0, 22, 0, 0, 0),
                            OpeningHours = new TimeSpan(0, 17, 0, 0, 0),
                            RestaurantAddress = "789 Dinner Dr",
                            RestaurantDescription = "Fine dining with exquisite dinner choices.",
                            RestaurantEmail = "hello@dinnerdelight.com",
                            RestaurantName = "Dinner Delight",
                            RestaurantPhone = "3456789012"
                        },
                        new
                        {
                            RestaurantID = 4,
                            ClosingHours = new TimeSpan(0, 23, 0, 0, 0),
                            OpeningHours = new TimeSpan(0, 10, 0, 0, 0),
                            RestaurantAddress = "101 Burger Blvd",
                            RestaurantDescription = "The ultimate burger experience.",
                            RestaurantEmail = "contact@burgerbonanza.com",
                            RestaurantName = "Burger Bonanza",
                            RestaurantPhone = "4567890123"
                        },
                        new
                        {
                            RestaurantID = 5,
                            ClosingHours = new TimeSpan(0, 23, 0, 0, 0),
                            OpeningHours = new TimeSpan(0, 10, 0, 0, 0),
                            RestaurantAddress = "202 Pizza Place",
                            RestaurantDescription = "Amazing pizzas with fresh ingredients.",
                            RestaurantEmail = "info@pizzapalace.com",
                            RestaurantName = "Pizza Palace",
                            RestaurantPhone = "5678901234"
                        },
                        new
                        {
                            RestaurantID = 6,
                            ClosingHours = new TimeSpan(0, 22, 0, 0, 0),
                            OpeningHours = new TimeSpan(0, 11, 0, 0, 0),
                            RestaurantAddress = "303 Italian St",
                            RestaurantDescription = "Authentic Italian cuisine.",
                            RestaurantEmail = "contact@italianbistro.com",
                            RestaurantName = "Italian Bistro",
                            RestaurantPhone = "6789012345"
                        },
                        new
                        {
                            RestaurantID = 7,
                            ClosingHours = new TimeSpan(0, 23, 0, 0, 0),
                            OpeningHours = new TimeSpan(0, 12, 0, 0, 0),
                            RestaurantAddress = "404 Arabian Ave",
                            RestaurantDescription = "Experience the taste of Arabian food.",
                            RestaurantEmail = "info@arabianights.com",
                            RestaurantName = "Arabian Nights",
                            RestaurantPhone = "7890123456"
                        },
                        new
                        {
                            RestaurantID = 8,
                            ClosingHours = new TimeSpan(0, 22, 0, 0, 0),
                            OpeningHours = new TimeSpan(0, 11, 0, 0, 0),
                            RestaurantAddress = "505 Appetizer Rd",
                            RestaurantDescription = "A variety of appetizers to start your meal.",
                            RestaurantEmail = "contact@appetizeralley.com",
                            RestaurantName = "Appetizer Alley",
                            RestaurantPhone = "8901234567"
                        },
                        new
                        {
                            RestaurantID = 9,
                            ClosingHours = new TimeSpan(0, 23, 0, 0, 0),
                            OpeningHours = new TimeSpan(0, 11, 0, 0, 0),
                            RestaurantAddress = "606 Main St",
                            RestaurantDescription = "Hearty main dishes for all tastes.",
                            RestaurantEmail = "info@maindishmasters.com",
                            RestaurantName = "Main Dish Masters",
                            RestaurantPhone = "9012345678"
                        },
                        new
                        {
                            RestaurantID = 10,
                            ClosingHours = new TimeSpan(0, 22, 0, 0, 0),
                            OpeningHours = new TimeSpan(0, 12, 0, 0, 0),
                            RestaurantAddress = "707 Dessert Blvd",
                            RestaurantDescription = "Sweet and decadent desserts.",
                            RestaurantEmail = "contact@dessertdelights.com",
                            RestaurantName = "Dessert Delights",
                            RestaurantPhone = "0123456789"
                        });
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.UpiPayment", b =>
                {
                    b.Property<int>("UpiPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UpiPaymentId"));

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("UpiId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UpiPaymentId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("UpiPayment");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.Users", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("AlternativePhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RestaurantID")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("RestaurantID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MenuItemsRestaurant", b =>
                {
                    b.Property<int>("MenuItemsItemID")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantsRestaurantID")
                        .HasColumnType("int");

                    b.HasKey("MenuItemsItemID", "RestaurantsRestaurantID");

                    b.HasIndex("RestaurantsRestaurantID");

                    b.ToTable("MenuItemsRestaurant");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.CardPayment", b =>
                {
                    b.HasOne("FoodCart_Hexaware.Models.Payment", "Payment")
                        .WithOne("CardPayment")
                        .HasForeignKey("FoodCart_Hexaware.Models.CardPayment", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.Cart", b =>
                {
                    b.HasOne("FoodCart_Hexaware.Models.MenuItems", "MenuItems")
                        .WithMany("Carts")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodCart_Hexaware.Models.Users", "Users")
                        .WithMany("Carts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItems");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.MenuItems", b =>
                {
                    b.HasOne("FoodCart_Hexaware.Models.MenuCategory", "MenuCategory")
                        .WithMany("MenuItems")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuCategory");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.NetBankingPayment", b =>
                {
                    b.HasOne("FoodCart_Hexaware.Models.Payment", "Payment")
                        .WithOne("NetBankingPayment")
                        .HasForeignKey("FoodCart_Hexaware.Models.NetBankingPayment", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.Notification", b =>
                {
                    b.HasOne("FoodCart_Hexaware.Models.MenuItems", "MenuItems")
                        .WithMany("Notifications")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodCart_Hexaware.Models.Restaurant", "Restaurant")
                        .WithMany("Notifications")
                        .HasForeignKey("RestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodCart_Hexaware.Models.Users", "Users")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItems");

                    b.Navigation("Restaurant");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.OrderItems", b =>
                {
                    b.HasOne("FoodCart_Hexaware.Models.MenuItems", "MenuItems")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodCart_Hexaware.Models.Orders", "Orders")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.Orders", b =>
                {
                    b.HasOne("FoodCart_Hexaware.Models.DeliveryAgent", "DeliveryAgent")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryAgentID");

                    b.HasOne("FoodCart_Hexaware.Models.Restaurant", "Restaurant")
                        .WithMany("Orders")
                        .HasForeignKey("RestaurantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodCart_Hexaware.Models.Users", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryAgent");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.Payment", b =>
                {
                    b.HasOne("FoodCart_Hexaware.Models.Orders", "Orders")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.UpiPayment", b =>
                {
                    b.HasOne("FoodCart_Hexaware.Models.Payment", "Payment")
                        .WithOne("UpiPayment")
                        .HasForeignKey("FoodCart_Hexaware.Models.UpiPayment", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.Users", b =>
                {
                    b.HasOne("FoodCart_Hexaware.Models.Restaurant", "restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantID");

                    b.Navigation("restaurant");
                });

            modelBuilder.Entity("MenuItemsRestaurant", b =>
                {
                    b.HasOne("FoodCart_Hexaware.Models.MenuItems", null)
                        .WithMany()
                        .HasForeignKey("MenuItemsItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodCart_Hexaware.Models.Restaurant", null)
                        .WithMany()
                        .HasForeignKey("RestaurantsRestaurantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.DeliveryAgent", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.MenuCategory", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.MenuItems", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Notifications");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.Orders", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.Payment", b =>
                {
                    b.Navigation("CardPayment");

                    b.Navigation("NetBankingPayment");

                    b.Navigation("UpiPayment");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.Restaurant", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodCart_Hexaware.Models.Users", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
